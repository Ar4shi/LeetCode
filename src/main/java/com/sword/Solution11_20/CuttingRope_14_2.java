package com.sword.Solution11_20;

/**
 * 剑指 Offer 14- II. 剪绳子 II
 *
 * @author jianghan
 * @date 2021-03-21 22:34
 */
public class CuttingRope_14_2 {

    //这道题和上题唯一的区别就是n很大
    //由于dp的复杂度为O(n^2)会导致此题超时
    //所以只能用贪心来做
    //尽可能把绳子分成长度为3的小段，这样乘积最大
    //我也不知道为啥↑ 反正是数学推导的
    //        n     乘积     子数字
//        2       1       1 1
//        3       2       1 2
//        4       4       2 2
//        5       6       2 3
//        6       9       3 3
//        7       12      2 2 3
//        8       18      2 3 3
//        9       27      3 3 3
//        10      36      2 2 3 3
//        11      54      2 3 3 3
//        12      81      3 3 3 3
//        13      108     2 2 3 3 3
//        14      162     2 3 3 3 3
//        15      243     3 3 3 3 3
//        16      324     2 2 3 3 3 3
//        17      486     2 3 3 3 3 3
//        18      729     3 3 3 3 3 3
//        19      972     2 2 3 3 3 3 3
//        20      1458    2 3 3 3 3 3 3
//        21      2187    3 3 3 3 3 3 3
//        22      2916    2 2 3 3 3 3 3 3
//        23      4374    2 3 3 3 3 3 3 3
//        24      6561    3 3 3 3 3 3 3 3
//        25      8748    2 2 3 3 3 3 3 3 3
//        26      13122   2 3 3 3 3 3 3 3 3
//        27      19683   3 3 3 3 3 3 3 3 3
//        28      26244   2 2 3 3 3 3 3 3 3 3
//        29      39366   2 3 3 3 3 3 3 3 3 3
    //看看就好 学会dp就够了
    public int cuttingRope(int n) {
        if (n < 4) {
            return n - 1;
        }
        long res = 1;
        while (n > 4) {
            res = res * 3 % 1000000007;
            n -= 3;
        }
        return (int) (res * n % 1000000007);
    }
}
